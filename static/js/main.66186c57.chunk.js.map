{"version":3,"sources":["Movie.js","MovieContext.js","MovieList.js","Nav.js","AddMovie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","movieName","moviePrice","movieId","react_default","a","createElement","MovieContext","createContext","MovieProvider","props","_useState","useState","name","price","id","_useState2","Object","slicedToArray","movies","setMovies","Provider","value","children","MovieList","_useContext","useContext","_useContext2","map","movie","src_Movie","key","Nav","style","display","justifyContent","backgroundColor","length","AddMovie","setName","_useState3","_useState4","setPrice","onSubmit","e","preventDefault","prevMovies","concat","toConsumableArray","type","onChange","target","App","className","MovieContext_MovieProvider","src_Nav","src_AddMovie","src_MovieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaeA,EAXD,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,WAAYC,EAAcH,EAAdG,QACvC,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,aCNUC,EAAeC,0BAEfC,EAAgB,SAAAC,GAAS,IAAAC,EACTC,mBAAS,CACpC,CACCC,KAAM,eACNC,MAAO,MACPC,GAAI,OAEL,CACCF,KAAM,kBACNC,MAAO,MACPC,GAAI,SAEL,CACCF,KAAM,YACNC,MAAO,MACPC,GAAI,WAf+BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAC9BQ,EAD8BH,EAAA,GACtBI,EADsBJ,EAAA,GAmBrC,OACCZ,EAAAC,EAAAC,cAACC,EAAac,SAAd,CAAuBC,MAAO,CAACH,EAAQC,IACrCV,EAAMa,WCJKC,EAjBG,WAAM,IAAAC,EACKC,qBAAWnB,GADhBoB,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAChBN,EADgBQ,EAAA,GAAAA,EAAA,GAGvB,OACCvB,EAAAC,EAAAC,cAAA,WACEa,EAAOS,IAAI,SAAAC,GAAK,OAChBzB,EAAAC,EAAAC,cAACwB,EAAD,CACCC,IAAKF,EAAMd,GACXd,UAAW4B,EAAMhB,KACjBX,WAAY2B,EAAMf,MAClBX,QAAS0B,EAAMd,SCILiB,EAfH,WAAM,IAAAP,EACWC,qBAAWnB,GADtBoB,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GACVN,EADUQ,EAAA,GAAAA,EAAA,GAEjB,OACCvB,EAAAC,EAAAC,cAAA,OACC2B,MAAO,CACNC,QAAS,OACTC,eAAgB,eAChBC,gBAAiB,SAElBhC,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,4BAAoBa,EAAOkB,iBC6BfC,EAvCE,WAAM,IAAA3B,EACEC,mBAAS,IADXI,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACfE,EADeG,EAAA,GACTuB,EADSvB,EAAA,GAAAwB,EAEI5B,mBAAS,IAFb6B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GAEf1B,EAFe2B,EAAA,GAERC,EAFQD,EAAA,GAAAhB,EAGMC,qBAAWnB,GAHjBoB,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGPL,GAHOO,EAAA,GAAAA,EAAA,IAyBtB,OACCvB,EAAAC,EAAAC,cAAA,QAAMqC,SAbU,SAAAC,GAChBA,EAAEC,iBACFzB,EAAU,SAAA0B,GAAU,SAAAC,OAAA9B,OAAA+B,EAAA,EAAA/B,CAChB6B,GADgB,CAEnB,CACCjC,KAAMA,EACNC,MAAO,IAAMA,EACbC,GAAI+B,EAAWA,EAAWT,OAAS,GAAGtB,GAAK,SAO5CX,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOpC,KAAK,OAAOS,MAAOT,EAAMqC,SAtB3B,SAAAN,GAClBL,EAAQK,EAAEO,OAAO7B,UAsBhBlB,EAAAC,EAAAC,cAAA,SACC2C,KAAK,OACLpC,KAAK,QACLS,MAAOR,EACPoC,SAvBiB,SAAAN,GACnBF,EAASE,EAAEO,OAAO7B,UAwBjBlB,EAAAC,EAAAC,cAAA,gCClBY8C,MAZf,WACC,OACChD,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,OACdjD,EAAAC,EAAAC,cAACgD,EAAD,KACClD,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,SCDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.66186c57.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Movie = ({ movieName, moviePrice, movieId }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>{movieName}</h3>\r\n\t\t\t<h5>{moviePrice}</h5>\r\n\t\t\t<h5>{movieId}</h5>\r\n\t\t\t<br />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = props => {\r\n\tconst [movies, setMovies] = useState([\r\n\t\t{\r\n\t\t\tname: \"Harry Potter\",\r\n\t\t\tprice: \"$10\",\r\n\t\t\tid: 23124\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Game of Thrones\",\r\n\t\t\tprice: \"$10\",\r\n\t\t\tid: 2564545\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Inception\",\r\n\t\t\tprice: \"$10\",\r\n\t\t\tid: 2323234\r\n\t\t}\r\n\t]);\r\n\r\n\treturn (\r\n\t\t<MovieContext.Provider value={[movies, setMovies]}>\r\n\t\t\t{props.children}\r\n\t\t</MovieContext.Provider>\r\n\t);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport Movie from \"./Movie\";\r\nimport { MovieContext } from \"./MovieContext\";\r\n\r\nconst MovieList = () => {\r\n\tconst [movies, setMovies] = useContext(MovieContext);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{movies.map(movie => (\r\n\t\t\t\t<Movie\r\n\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\tmovieName={movie.name}\r\n\t\t\t\t\tmoviePrice={movie.price}\r\n\t\t\t\t\tmovieId={movie.id}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MovieList;\r\n","import React, { useContext } from \"react\";\r\nimport { MovieContext } from \"./MovieContext\";\r\n\r\nconst Nav = () => {\r\n\tconst [movies, setMovies] = useContext(MovieContext);\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tjustifyContent: \"space-around\",\r\n\t\t\t\tbackgroundColor: \"gray\"\r\n\t\t\t}}>\r\n\t\t\t<h3>Movie List</h3>\r\n\t\t\t<p>List of movies: {movies.length}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { MovieContext } from \"./MovieContext\";\r\n\r\nconst AddMovie = () => {\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [price, setPrice] = useState(\"\");\r\n\tconst [movies, setMovies] = useContext(MovieContext);\r\n\r\n\tconst updateName = e => {\r\n\t\tsetName(e.target.value);\r\n\t};\r\n\r\n\tconst updatePrice = e => {\r\n\t\tsetPrice(e.target.value);\r\n\t};\r\n\r\n\tconst addMovie = e => {\r\n\t\te.preventDefault();\r\n\t\tsetMovies(prevMovies => [\r\n\t\t\t...prevMovies,\r\n\t\t\t{\r\n\t\t\t\tname: name,\r\n\t\t\t\tprice: \"$\" + price,\r\n\t\t\t\tid: prevMovies[prevMovies.length - 1].id + 1\r\n\t\t\t}\r\n\t\t]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={addMovie}>\r\n\t\t\t<input type='text' name='name' value={name} onChange={updateName} />\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tname='price'\r\n\t\t\t\tvalue={price}\r\n\t\t\t\tonChange={updatePrice}\r\n\t\t\t/>\r\n\t\t\t<button>Submit</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default AddMovie;\r\n","import React from \"react\";\nimport MovieList from \"./MovieList\";\nimport Nav from \"./Nav\";\nimport AddMovie from \"./AddMovie\";\nimport { MovieProvider } from \"./MovieContext\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<MovieProvider>\n\t\t\t\t<Nav />\n\t\t\t\t<AddMovie />\n\t\t\t\t<MovieList />\n\t\t\t</MovieProvider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}